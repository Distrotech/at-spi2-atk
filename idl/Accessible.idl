#ifndef _ACCESSIBILITY_ACCESSIBLE_IDL
#define _ACCESSIBILITY_ACCESSIBLE_IDL


#include <Bonobo.idl>

#if !defined(__ACCESSIBILITY_ACCESSIBLE_COMPILATION) && defined(__ORBIT_IDL__)
%{
#pragma include_defs Accessible.h
%}
#pragma inhibit push
#endif

#include "Relation.idl"
#include "State.idl"
#include "Role.idl"

module Accessibility {
  
  typedef sequence<Relation> RelationSet;

  interface Accessible : Bonobo::Unknown {

    /**
     * #attribute description: a (short) @string representing the object's name.
     **/
    attribute string name;

    /**
     * #attribute description: a @string describing the object in more detail than @name.
     **/
    attribute string description;

    /**
     * #attribute parent: an @Accessible object which is this object's containing object.
     **/
    readonly attribute Accessible parent;

    /**
     * getChildCount:
     * return values: the number of children contained by this object (zero if none).
     *
     * Get the number of children contained by this object.
     *
     **/
    readonly attribute long    	childCount;

    /**
     * getChildAtIndex:
     * @index: an in parameter indicating which child is requested (zero-indexed).
     * return values: the 'nth' @Accessible child of this object.
     *
     * Get the accessible child of this object at index @index.
     *
     **/
    Accessible 	getChildAtIndex (in long index);

    /**
     * getIndexInParent:
     * return values: a long integer indicating this object's index in the parent's list.
     *
     * Get the index of this object in its parent's child list.
     *
     **/
    long		getIndexInParent ();

    /**
     * getRelationSet:
     * return values: a @RelationSet defining this object's relationships.
     *
     * Get a set defining this object's relationship to other accessible objects.
     *
     **/
    RelationSet	getRelationSet ();

    /**
     * getRole:
     * return values: the @Role of this object.
     *
     * Get the @Role indicating the type of UI role played by this object.
     *
     **/
    Role		getRole ();

    /**
     * getState:
     * return values: a @StateSet encapsulating the currently true states of the object.
     *
     * Get the current state of the object as a @StateSet.
     **/
    StateSet	getState ();
  };
};

#if !defined(__ACCESSIBILITY_ACCESSIBLE_COMPILATION) && defined(__ORBIT_IDL__)
#pragma inhibit pop
#endif

#endif

