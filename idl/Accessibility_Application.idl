/* 
 * AT-SPI - Assistive Technology Service Provider Interface 
 * (Gnome Accessibility Project; http://developer.gnome.org/projects/gap)
 *
 * Copyright 2001 Sun Microsystems Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

#ifndef __ACCESSIBILITY_APPLICATION_DEFINED__
#define __ACCESSIBILITY_APPLICATION_DEFINED__

#include <Bonobo.idl>
#include <Accessible.idl>

module Accessibility {
  interface Application : Accessible {

    /**
     * Get a string indicating the type of user interface toolkit
     * which is used by the application.
     * Ordinarily clients of @AccessibleApplication should be
     * toolkit-agnostic, dependencies on this method probably
     * should be reconsidered!
     **/
    readonly attribute string toolkitName;

    /**
     * Get a string indicating the version number of the application's
     * accessibility bridge implementation.
     **/
    readonly attribute string version;

    /**
     * Get the application instance's unique ID as assigned by the registry.
     *
     **/
    attribute long id;

    /**
     * Register with this application's toolkit for "toolkit" event notifications.
     *
     **/
    void registerToolkitEventListener (in EventListener listener, in string eventName);

    /**
     * pause:
     * Returns: %true if the request succeeded, %false otherwise.
     *
     * Request that the application temporarily stop sending events.
     * In most cases this should pause the application's main event loop.
     *
     **/
    boolean       pause ();

    /**
     * resume:
     * Returns: %true if the request succeeded, %false otherwise.
     *
     * Request that the application resume sending events.
     *
     **/
    boolean       resume ();
  };
};

#endif
