<!-- ##### SECTION Title ##### -->
Registry queries

<!-- ##### SECTION Short_Description ##### -->


<!-- ##### SECTION Long_Description ##### -->
<para>

</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### ENUM AccessibleKeySynthType ##### -->
<para>

</para>

@SPI_KEY_PRESS: 
@SPI_KEY_RELEASE: 
@SPI_KEY_PRESSRELEASE: 
@SPI_KEY_SYM: 
@SPI_KEY_STRING: 

<!-- ##### FUNCTION SPI_getDesktopCount ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION SPI_getDesktop ##### -->
<para>

</para>

@i: 
@Returns: 


<!-- ##### FUNCTION SPI_getDesktopList ##### -->
<para>

</para>

@desktop_list: 
@Returns: 


<!-- ##### FUNCTION SPI_freeDesktopList ##### -->
<para>

</para>

@desktop_list: 


<!-- ##### USER_FUNCTION AccessibleKeystrokeListenerCB ##### -->
<para>
This is a function which is specified when creating a KeystrokeListener.
It is called when an event being listened for occurs. 
If it returns TRUE, this indicates that the event should be consumed 
rather than passed through; only callbacks whose listeners are
registered with the SPI_KEYLISTENER_ALL_WINDOWS or 
SPI_KEYLISTENER_CANCONSUME flags can be consumed.
</para>

@stroke: 
@user_data: 
@Returns: 


<!-- ##### TYPEDEF AccessibleKeyEventMask ##### -->
<para>
AccessibleKeyEventMask is a set of types of key events. It is used 
in SPI_registerAccessibleKeystroketListener to specify the events to be 
listener for.
</para>


<!-- ##### TYPEDEF AccessibleModifierMaskType ##### -->
<para>
AccessibleModifierMaskType is a synonym for AccessibleKeymaskType.
The defined values for AccessibleModifierMaskType can be found in
libspi/keymasks.h.
</para>


<!-- ##### TYPEDEF AccessibleKeyMaskType ##### -->
<para>

</para>


<!-- ##### TYPEDEF AccessibleKeyEventType ##### -->
<para>

</para>


<!-- ##### ENUM AccessibleKeyListenerSyncType ##### -->
<para>

</para>

@SPI_KEYLISTENER_NOSYNC: 
@SPI_KEYLISTENER_SYNCHRONOUS: 
@SPI_KEYLISTENER_CANCONSUME: 
@SPI_KEYLISTENER_ALL_WINDOWS: 

<!-- ##### TYPEDEF AccessibleKeystroke ##### -->
<para>
This is a synonym for AccessibleDeviceEvent.
</para>


<!-- ##### FUNCTION SPI_createAccessibleKeySet ##### -->
<para>

</para>

@len: 
@keysyms: 
@keycodes: 
@keystrings: 
@Returns: 


<!-- ##### FUNCTION SPI_freeAccessibleKeySet ##### -->
<para>

</para>

@keyset: 


<!-- ##### FUNCTION SPI_createAccessibleKeystrokeListener ##### -->
<para>

</para>

@callback: 
@user_data: 
@Returns: 


<!-- ##### FUNCTION SPI_registerGlobalEventListener ##### -->
<para>

</para>

@listener: 
@eventType: 
@Returns: 


<!-- ##### FUNCTION SPI_deregisterGlobalEventListener ##### -->
<para>

</para>

@listener: 
@eventType: 
@Returns: 


<!-- ##### FUNCTION SPI_deregisterGlobalEventListenerAll ##### -->
<para>

</para>

@listener: 
@Returns: 


<!-- ##### FUNCTION SPI_registerAccessibleKeystrokeListener ##### -->
<para>

</para>

@listener: 
@keys: 
@modmask: 
@eventmask: 
@sync_type: 
@Returns: 


<!-- ##### FUNCTION SPI_deregisterAccessibleKeystrokeListener ##### -->
<para>

</para>

@listener: 
@modmask: 
@Returns: 


<!-- ##### FUNCTION AccessibleKeystrokeListener_unref ##### -->
<para>

</para>

@listener: 


<!-- ##### FUNCTION AccessibleKeystrokeListener_removeCallback ##### -->
<para>

</para>

@listener: 
@callback: 
@Returns: 


<!-- ##### FUNCTION AccessibleKeystrokeListener_addCallback ##### -->
<para>

</para>

@listener: 
@callback: 
@user_data: 
@Returns: 


<!-- ##### FUNCTION SPI_generateKeyboardEvent ##### -->
<para>

</para>

@keyval: 
@keystring: 
@synth_type: 
@Returns: 


<!-- ##### FUNCTION SPI_generateMouseEvent ##### -->
<para>

</para>

@x: 
@y: 
@name: 
@Returns: 


<!-- ##### STRUCT AccessibleDeviceEvent ##### -->
<para>
AccessibleDeviceEvent is a struct which encapsulates a device event.
</para>

@keystring: 
@type: 
@is_text: 

<!-- ##### TYPEDEF AccessibleDeviceEventMask ##### -->
<para>
AccessibleDeviceEventMask is a set of types of key events. It is used 
in SPI_registerDeviceEventListener to specify the events to be listener for.
</para>


<!-- ##### ENUM AccessibleDeviceEventType ##### -->
<para>

</para>

@SPI_KEY_PRESSED: 
@SPI_KEY_RELEASED: 
@SPI_BUTTON_PRESSED: 
@SPI_BUTTON_RELEASED: 

<!-- ##### USER_FUNCTION AccessibleDeviceListenerCB ##### -->
<para>
This is a function which is specified when creating a DeviceListener.
It is called when an event being listened for occurs. 
</para>

@stroke: 
@user_data: 
@Returns: 


<!-- ##### FUNCTION SPI_createAccessibleDeviceListener ##### -->
<para>

</para>

@callback: 
@user_data: 
@Returns: 


<!-- ##### FUNCTION SPI_registerDeviceEventListener ##### -->
<para>

</para>

@listener: 
@eventmask: 
@filter: 
@Returns: 


<!-- ##### FUNCTION SPI_deregisterDeviceEventListener ##### -->
<para>

</para>

@listener: 
@filter: 
@Returns: 


<!-- ##### FUNCTION AccessibleDeviceListener_addCallback ##### -->
<para>

</para>

@listener: 
@callback: 
@user_data: 
@Returns: 


<!-- ##### FUNCTION AccessibleDeviceListener_removeCallback ##### -->
<para>

</para>

@listener: 
@callback: 
@Returns: 


<!-- ##### FUNCTION AccessibleDeviceListener_unref ##### -->
<para>

</para>

@listener: 


